import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import '../../providers/invoice_provider.dart';
import '../../providers/printer_provider.dart';
import '../../l10n/app_localizations.dart';
import '../../models/invoice_model.dart';
import '../../utils/constants.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/printer_selection_dialog.dart';
import 'package:qr_flutter/qr_flutter.dart';

class InvoiceDetailsScreen extends StatefulWidget {
  final Map<String, dynamic> invoice;

  const InvoiceDetailsScreen({Key? key, required this.invoice}) : super(key: key);

  @override
  State<InvoiceDetailsScreen> createState() => _InvoiceDetailsScreenState();
}

class _InvoiceDetailsScreenState extends State<InvoiceDetailsScreen> {
  late InvoiceModel invoice;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    invoice = InvoiceModel.fromJson(widget.invoice);
  }

  Future<void> _submitInvoice() async {
    if (invoice.id == null) return;

    setState(() {
      _isLoading = true;
    });

    final invoiceProvider = Provider.of<InvoiceProvider>(context, listen: false);
    final success = await invoiceProvider.submitInvoice(invoice.id!);

    setState(() {
      _isLoading = false;
    });

    final l10n = AppLocalizations.of(context);
    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(l10n?.invoiceSubmitted ?? 'Invoice submitted successfully'),
          backgroundColor: AppColors.success,
        ),
      );
      // Refresh the invoice data
      setState(() {
        invoice = invoice.copyWith(status: 'submitted');
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(invoiceProvider.error ?? 'Failed to submit invoice'),
          backgroundColor: AppColors.error,
        ),
      );
    }
  }

  Future<void> _printInvoice() async {
    final printerProvider = Provider.of<PrinterProvider>(context, listen: false);

    if (!printerProvider.hasPrinterConnected) {
      await _showPrinterSelectionDialog();
      return;
    }

    final l10n = AppLocalizations.of(context);
    bool success = false;

    if (printerProvider.selectedBluetoothPrinter != null) {
      success = await printerProvider.printInvoiceViaBluetooth(invoice);
    } else if (printerProvider.selectedNetworkPrinter != null) {
      success = await printerProvider.printInvoiceViaNetwork(invoice);
    } else {
      success = await printerProvider.printInvoiceAsPdf(invoice);
    }

    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(l10n?.printSuccess ?? 'Print successful'),
          backgroundColor: AppColors.success,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(printerProvider.error ?? l10n?.printFailed ?? 'Print failed'),
          backgroundColor: AppColors.error,
        ),
      );
    }
  }

  Future<void> _showPrinterSelectionDialog() async {
    await showDialog(
      context: context,
      builder: (context) => const PrinterSelectionDialog(),
    );
  }

  Future<void> _downloadPdf() async {
    if (invoice.id == null) return;

    final invoiceProvider = Provider.of<InvoiceProvider>(context, listen: false);
    final pdfBytes = await invoiceProvider.downloadInvoicePdf(invoice.id!);

    if (pdfBytes != null) {
      // Save PDF to device
      final fileName = 'invoice_${invoice.invoiceNumber}.pdf';
      // Implementation would depend on the file storage method
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('PDF downloaded successfully'),
          backgroundColor: AppColors.success,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(invoiceProvider.error ?? 'Failed to download PDF'),
          backgroundColor: AppColors.error,
        ),
      );
    }
  }

  Future<void> _shareInvoice() async {
    final invoiceText = '''
Invoice #${invoice.invoiceNumber}
Customer: ${invoice.customerName}
Date: ${invoice.invoiceDate.toString().split(' ')[0]}
Total: ${invoice.totalAmount.toStringAsFixed(2)} ${invoice.currency}
Status: ${invoice.status}

Items:
${invoice.items.map((item) => 'â€¢ ${item.description}: ${item.quantity} x ${item.price.toStringAsFixed(2)} = ${item.total.toStringAsFixed(2)}').join('\n')}

Generated by JoFotara E-Invoicing System
''';

    await Share.share(invoiceText, subject: 'Invoice #${invoice.invoiceNumber}');
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text('Invoice #${invoice.invoiceNumber}'),
        actions: [
          PopupMenuButton<String>(
            onSelected: (value) {
              switch (value) {
                case 'share':
                  _shareInvoice();
                  break;
                case 'download':
                  _downloadPdf();
                  break;
              }
            },
            itemBuilder: (context) => [
              PopupMenuItem(
                value: 'share',
                child: Row(
                  children: [
                    const Icon(Icons.share),
                    const SizedBox(width: 8),
                    Text(l10n?.share ?? 'Share'),
                  ],
                ),
              ),
              PopupMenuItem(
                value: 'download',
                child: Row(
                  children: [
                    const Icon(Icons.download),
                    const SizedBox(width: 8),
                    Text(l10n?.downloadPdf ?? 'Download PDF'),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(AppSizes.paddingMedium),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Status Card
            Card(
              color: _getStatusColor(invoice.status).withOpacity(0.1),
              child: Padding(
                padding: const EdgeInsets.all(AppSizes.paddingMedium),
                child: Row(
                  children: [
                    Icon(
                      _getStatusIcon(invoice.status),
                      color: _getStatusColor(invoice.status),
                      size: AppSizes.iconLarge,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            _getStatusText(context, invoice.status),
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: _getStatusColor(invoice.status),
                            ),
                          ),
                          Text(
                            _getStatusDescription(context, invoice.status),
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 20),

            // Invoice Information
            _buildInfoSection(context, 'Invoice Details', [
              _buildInfoRow(context, 'Invoice Number', invoice.invoiceNumber),
              _buildInfoRow(context, 'Invoice Date', _formatDate(invoice.invoiceDate)),
              if (invoice.dueDate != null)
                _buildInfoRow(context, 'Due Date', _formatDate(invoice.dueDate!)),
              _buildInfoRow(context, 'Currency', invoice.currency),
              _buildInfoRow(context, 'Payment Status', _getPaymentStatusText(context, invoice.paymentStatus)),
            ]),

            const SizedBox(height: 20),

            // Customer Information
            _buildInfoSection(context, 'Customer Details', [
              _buildInfoRow(context, 'Name', invoice.customerName),
              if (invoice.customerEmail != null)
                _buildInfoRow(context, 'Email', invoice.customerEmail!),
              if (invoice.customerPhone != null)
                _buildInfoRow(context, 'Phone', invoice.customerPhone!),
              if (invoice.customerAddress != null)
                _buildInfoRow(context, 'Address', invoice.customerAddress!),
              if (invoice.customerTaxNumber != null)
                _buildInfoRow(context, 'Tax Number', invoice.customerTaxNumber!),
            ]),

            const SizedBox(height: 20),

            // Items Section
            _buildItemsSection(context),

            const SizedBox(height: 20),

            // Totals Section
            _buildTotalsSection(context),

            const SizedBox(height: 20),

            // QR Code Section
            if (invoice.qrCode != null) ...[
              _buildQrCodeSection(context),
              const SizedBox(height: 20),
            ],

            // Actions Section
            _buildActionsSection(context),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoSection(BuildContext context, String title, List<Widget> children) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.paddingMedium),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.primaryColor,
              ),
            ),
            const SizedBox(height: 12),
            ...children,
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(BuildContext context, String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: Colors.grey[700],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildItemsSection(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.paddingMedium),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Items',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.primaryColor,
              ),
            ),
            const SizedBox(height: 12),
            Table(
              columnWidths: const {
                0: FlexColumnWidth(3),
                1: FlexColumnWidth(1),
                2: FlexColumnWidth(2),
                3: FlexColumnWidth(2),
              },
              children: [
                TableRow(
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                  ),
                  children: [
                    _buildTableHeader('Description'),
                    _buildTableHeader('Qty'),
                    _buildTableHeader('Price'),
                    _buildTableHeader('Total'),
                  ],
                ),
                ...invoice.items.map((item) => TableRow(
                  children: [
                    _buildTableCell(item.description),
                    _buildTableCell(item.quantity.toString()),
                    _buildTableCell(item.price.toStringAsFixed(2)),
                    _buildTableCell(item.total.toStringAsFixed(2)),
                  ],
                )),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTableHeader(String text) {
    return Padding(
      padding: const EdgeInsets.all(8),
      child: Text(
        text,
        style: const TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 12,
        ),
      ),
    );
  }

  Widget _buildTableCell(String text) {
    return Padding(
      padding: const EdgeInsets.all(8),
      child: Text(
        text,
        style: const TextStyle(fontSize: 12),
      ),
    );
  }

  Widget _buildTotalsSection(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.paddingMedium),
        child: Column(
          children: [
            _buildTotalRow(context, 'Subtotal', '${invoice.netAmount.toStringAsFixed(2)} ${invoice.currency}'),
            _buildTotalRow(context, 'Tax', '${invoice.taxAmount.toStringAsFixed(2)} ${invoice.currency}'),
            if (invoice.discountAmount > 0)
              _buildTotalRow(context, 'Discount', '${invoice.discountAmount.toStringAsFixed(2)} ${invoice.currency}'),
            const Divider(),
            _buildTotalRow(
              context,
              'Total',
              '${invoice.totalAmount.toStringAsFixed(2)} ${invoice.currency}',
              isTotal: true,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTotalRow(BuildContext context, String label, String value, {bool isTotal = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: isTotal ? FontWeight.bold : FontWeight.w500,
              fontSize: isTotal ? 16 : 14,
            ),
          ),
          Text(
            value,
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
              fontSize: isTotal ? 16 : 14,
              color: isTotal ? AppColors.primaryColor : null,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQrCodeSection(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.paddingMedium),
        child: Column(
          children: [
            Text(
              'QR Code',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.primaryColor,
              ),
            ),
            const SizedBox(height: 12),
            Center(
              child: QrImageView(
                data: invoice.qrCode!,
                version: QrVersions.auto,
                size: 200.0,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionsSection(BuildContext context) {
    final l10n = AppLocalizations.of(context);

    return Column(
      children: [
        if (invoice.status == 'draft') ...[
          CustomButton(
            text: l10n?.submitToJoFotara ?? 'Submit to JoFotara',
            icon: Icons.send,
            isLoading: _isLoading,
            onPressed: _submitInvoice,
            width: double.infinity,
          ),
          const SizedBox(height: 12),
        ],

        Row(
          children: [
            Expanded(
              child: Consumer<PrinterProvider>(
                builder: (context, printerProvider, child) {
                  return CustomButton(
                    text: l10n?.printInvoice ?? 'Print',
                    icon: Icons.print,
                    isOutlined: true,
                    isLoading: printerProvider.isPrinting,
                    onPressed: _printInvoice,
                  );
                },
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: CustomButton(
                text: l10n?.downloadPdf ?? 'Download PDF',
                icon: Icons.download,
                isOutlined: true,
                onPressed: _downloadPdf,
              ),
            ),
          ],
        ),
      ],
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  Color _getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case 'submitted':
        return AppColors.success;
      case 'rejected':
        return AppColors.error;
      case 'paid':
        return AppColors.info;
      case 'draft':
      default:
        return AppColors.warning;
    }
  }

  IconData _getStatusIcon(String status) {
    switch (status.toLowerCase()) {
      case 'submitted':
        return Icons.check_circle;
      case 'rejected':
        return Icons.error;
      case 'paid':
        return Icons.payment;
      case 'draft':
      default:
        return Icons.draft;
    }
  }

  String _getStatusText(BuildContext context, String status) {
    final l10n = AppLocalizations.of(context);
    switch (status.toLowerCase()) {
      case 'submitted':
        return l10n?.submitted ?? 'Submitted';
      case 'rejected':
        return l10n?.rejected ?? 'Rejected';
      case 'paid':
        return l10n?.paid ?? 'Paid';
      case 'draft':
      default:
        return l10n?.draft ?? 'Draft';
    }
  }

  String _getStatusDescription(BuildContext context, String status) {
    switch (status.toLowerCase()) {
      case 'submitted':
        return 'Invoice has been submitted to JoFotara';
      case 'rejected':
        return 'Invoice was rejected by JoFotara';
      case 'paid':
        return 'Invoice has been paid';
      case 'draft':
      default:
        return 'Invoice is in draft status';
    }
  }

  String _getPaymentStatusText(BuildContext context, String status) {
    final l10n = AppLocalizations.of(context);
    switch (status.toLowerCase()) {
      case 'paid':
        return l10n?.paid ?? 'Paid';
      case 'overdue':
        return l10n?.overdue ?? 'Overdue';
      case 'pending':
      default:
        return l10n?.pending ?? 'Pending';
    }
  }
}
